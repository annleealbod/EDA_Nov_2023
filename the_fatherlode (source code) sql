-- The Fatherlode
select case
    when (`swcmm`.`csa_name_mod` in ('Dallas-Fort Worth, TX-OK', 'Las Vegas-Henderson, NV', 'Salt Lake City-Provo-Orem, UT')) then swcmm.csa_name_mod
    else 'All Other Markets Combined'
    end as csa_name_mod2, c.id as company_id, c.name as company_name,
    shift_lead_time_fs, head_count_requested_fs, head_count_worked_fs, fill_rate_fs,
    tsf3d.total_shifts_f30d, worked_shifts_f30d, head_count_f30d, worked_shifts_f30d / head_count_f30d as fill_rate_f30d, avg_days_between_shifts_f30d,
    (total_head_count - fsinfo.head_count_requested_fs) as total_head_count_minus_fs, (total_head_count - head_count_f30d) as total_head_count_minus_f30d,
    yqcs.year_quarter_comp_start
from companies c
join postings p on c.id = p.company_id
join shifts s on p.id = s.posting_id
join shifts_with_csas_mv_mod swcmm on swcmm.shift_id = s.id
left join (
    select pt1.company_id, count(distinct aws2.shift_id) as total_shifts_f30d
from (
select fs.company_id, date(fs.company_start) as company_start, DATE_ADD(date(fs.company_start), INTERVAL 30 DAY) AS f30d_end
from (
select aws.company_id, min(aws.start_time) as company_start
from analytic_worked_shifts aws
group by company_id ) as fs
) pt1
join analytic_worked_shifts aws2 on pt1.company_id = aws2.company_id
where aws2.start_time >= pt1.company_start
and aws2.start_time <= pt1.f30d_end
group by pt1.company_id
) as tsf3d on tsf3d.company_id = c.id
left join (
    select fs.company_id, fs.shift_id, DATEDIFF(s.start_time, p.created_at) as shift_lead_time_fs, s.head_count as head_count_requested_fs, sw.head_count_worked as head_count_worked_fs, sw.head_count_worked / s.head_count as fill_rate_fs
from (
select aws.company_id, aws.shift_id, min(aws.start_time) as first_shift
from analytic_worked_shifts aws
group by company_id ) as fs
left join (
    select aws2.shift_id, count(aws2.worker_user_id) as head_count_worked
    from analytic_worked_shifts aws2
    group by aws2.shift_id
) sw on sw.shift_id = fs.shift_id
join shifts s on fs.shift_id = s.id
join postings p on s.posting_id = p.id
group by fs.company_id
) fsinfo on fsinfo.company_id = c.id
left join (
    select pt1.company_id, count(distinct aws2.worker_user_id) as worked_shifts_f30d
from (
select fs.company_id, date(fs.company_start) as company_start, DATE_ADD(date(fs.company_start), INTERVAL 30 DAY) AS f30d_end
from (
select aws.company_id, min(aws.start_time) as company_start
from analytic_worked_shifts aws
group by company_id ) as fs
) pt1
join analytic_worked_shifts aws2 on pt1.company_id = aws2.company_id
where aws2.start_time >= pt1.company_start
and aws2.start_time <= pt1.f30d_end
group by pt1.company_id
) wsf3d on wsf3d.company_id = c.id
left join (
    select pt1.company_id, sum(s.head_count) as head_count_f30d
from (
select fs.company_id, date(fs.company_start) as company_start, DATE_ADD(date(fs.company_start), INTERVAL 30 DAY) AS f30d_end
from (
select aws.company_id, min(aws.start_time) as company_start
from analytic_worked_shifts aws
group by company_id ) as fs
) pt1
join analytic_worked_shifts aws2 on pt1.company_id = aws2.company_id
join shifts s on aws2.shift_id = s.id
where s.start_time >= pt1.company_start
and s.start_time <= pt1.f30d_end
and s.status != 6
group by pt1.company_id
) hcrf3d on hcrf3d.company_id = c.id
left join (
    SELECT
    lagged_data.company_id,
    AVG(TIMESTAMPDIFF(DAY, lag_shift_start_time, start_time)) AS avg_days_between_shifts_f30d
FROM (
    SELECT company_id,
             start_time,
             LAG(start_time) OVER (PARTITION BY company_id ORDER BY start_time) AS lag_shift_start_time
      FROM (
      select distinct shift_id, company_id, aws.start_time
        from analytic_worked_shifts aws
        where YEAR(start_time) = 2023
        group by company_id, shift_id) mini_table
      ) as lagged_data
    LEFT JOIN (
select fs.company_id, date(fs.company_start) as company_start, DATE_ADD(date(fs.company_start), INTERVAL 30 DAY) AS f30d_end
from (
select aws.company_id, min(aws.start_time) as company_start
from analytic_worked_shifts aws
group by company_id ) as fs
) compdates on compdates.company_id = lagged_data.company_id
where start_time <= compdates.f30d_end
GROUP BY company_id
) adbsf3d on adbsf3d.company_id = c.id
left join (
    select c.id as company_id,
    c.name as company_name,
    sum(s.head_count) as total_head_count
from companies c
join postings p on c.id = p.company_id
join shifts s on p.id = s.posting_id
and s.status != 6
group by c.id, c.name
) thc on thc.company_id = c.id
left join (
    SELECT company_id,
CONCAT(YEAR(company_start_time), 'Q', QUARTER(company_start_time)) AS year_quarter_comp_start
FROM (
    select aws.company_id, min(aws.start_time) as company_start_time
    from analytic_worked_shifts aws
    group by aws.company_id
     ) cst
ORDER BY year_quarter_comp_start
) yqcs on yqcs.company_id = c.id
where c.id != 3662
and (yqcs.year_quarter_comp_start like '2022Q3') or (yqcs.year_quarter_comp_start like '2022Q4') or (yqcs.year_quarter_comp_start like '2023Q1') or (yqcs.year_quarter_comp_start like '2023Q2')
group by csa_name_mod2, c.id;


